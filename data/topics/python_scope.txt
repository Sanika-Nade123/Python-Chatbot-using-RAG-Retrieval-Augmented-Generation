Python scope defines variable visibility and lifetime. LEGB rule determines name resolution: Local, Enclosing, Global, Built-in.

Local scope contains names defined within a function. These variables are only accessible inside their defining function.

Enclosing scope refers to variables in outer functions when using nested functions. Nonlocal keyword modifies enclosing scope variables.

Global scope contains names defined at module level. The global keyword allows modifying global variables from within functions.

Built-in scope includes Python's built-in names like print, len, etc. These are always available unless explicitly overridden.

Name shadowing occurs when local variables have same names as global ones. Proper scope understanding prevents unexpected behavior.