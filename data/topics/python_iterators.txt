Iterators in Python implement __iter__() and __next__() methods. They enable iteration over collections and custom sequences.

The iter() function creates iterators from iterables. StopIteration exception signals iteration completion.

Generator functions use yield to create iterators. They maintain state between calls and are memory efficient.

Generator expressions provide concise syntax for creating generators, similar to list comprehensions but with parentheses.

Iterator chaining and transformation use itertools module. Functions like chain(), cycle(), and islice() manipulate iterators.

Custom iterators enable iteration over user-defined data structures. They're fundamental to Python's for loop implementation.